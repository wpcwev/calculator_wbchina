import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# ======== –ù–ê–°–¢–†–û–ô–ö–ò ========
API_TOKEN = os.getenv("TGTOKEN")

# –°—Ç–∞–≤–∫–∏ –≤—ã–ø–ª–∞—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—É (–≤ —Ä—É–±./–∑–∞ 1 —é–∞–Ω—å)
PAY_NO_DISCOUNT_RUB_PER_CNY = 0.15   # –±–µ–∑ —Å–∫–∏–¥–∫–∏
PAY_DISCOUNT_RUB_PER_CNY   = 0.10   # —Å–æ —Å–∫–∏–¥–∫–æ–π

# –ù–∞–¥–±–∞–≤–∫–∞ –∫ –∫—É—Ä—Å—É –≤ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∞—Ö (–≤ —Ä—É–±./–∑–∞ 1 —é–∞–Ω—å)
CHECK_ADD_NO_DISCOUNT = 0.10
CHECK_ADD_DISCOUNT    = 0.05

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ======== –ö–õ–ê–í–ò–ê–¢–£–†–´ ========
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏")],
    ],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# ======== STATES ========
class ProfitStates(StatesGroup):
    rate_ge_30000 = State()
    rate_10000_30000 = State()
    rate_3000_10000 = State()
    rate_1000_3000 = State()
    rate_lt_1000 = State()
    amounts_no_discount = State()
    amounts_discount = State()

# ======== –£–¢–ò–õ–ò–¢–´ ========
def _parse_float(text: str) -> float | None:
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫
    t = text.strip().replace(",", ".")
    try:
        return float(t)
    except ValueError:
        return None

def _parse_multiline_numbers(text: str) -> list[float]:
    lines = [l.strip() for l in text.replace("\t", "\n").split("\n")]
    nums: list[float] = []
    for ln in lines:
        if not ln:
            continue
        # –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        ln_norm = ln.replace(",", ".")
        # –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫—É –∏ –º–∏–Ω—É—Å –∏ –ø—Ä–æ–±–µ–ª—ã
        # –Ω–æ –ø—Ä–æ—â–µ: –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ —Ü–µ–ª–æ–π —Å—Ç—Ä–æ–∫–µ
        try:
            val = float(ln_norm)
            nums.append(val)
            continue
        except ValueError:
            # –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            filtered = "".join(ch for ch in ln_norm if (ch.isdigit() or ch in ".-"))
            if filtered in ("", ".", "-"):
                continue
            try:
                val = float(filtered)
                nums.append(val)
            except ValueError:
                # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º—É—Å–æ—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                pass
    return nums

def _format_rub(x: float) -> str:
    return f"{x:,.2f} ‚ÇΩ".replace(",", " ").replace(".00", ".00")

def _format_cny(x: float) -> str:
    return f"{x:,.2f} ¬•".replace(",", " ")

def _pick_rate_for_amount(cny_amount: float, rates: dict) -> float:
    """
    rates: {
      'ge_30000', 'r_10000_30000', 'r_3000_10000', 'r_1000_3000', 'lt_1000'
    }
    """
    if cny_amount >= 30000:
        return rates["ge_30000"]
    if 10000 <= cny_amount < 30000:
        return rates["r_10000_30000"]
    if 3000 <= cny_amount < 10000:
        return rates["r_3000_10000"]
    if 1000 <= cny_amount < 3000:
        return rates["r_1000_3000"]
    return rates["lt_1000"]

# ======== –•–≠–ù–î–õ–ï–†–´ ========
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –ø–∞—Ä—Ç–Ω—ë—Ä—É –ø–æ –æ–±–º–µ–Ω—É. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=main_kb)

@dp.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

@dp.message(F.text == "üìä –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏")
async def start_profit_calc(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(rates={})
    await message.answer("–ö–∞–∫–æ–π –±—ã–ª –∫—É—Ä—Å —Å–µ–≥–æ–¥–Ω—è <b>–æ—Ç 30000 —é–∞–Ω–µ–π</b>? (–≤ ‚ÇΩ –∑–∞ 1 ¬•)", reply_markup=cancel_kb)
    await state.set_state(ProfitStates.rate_ge_30000)

@dp.message(ProfitStates.rate_ge_30000)
async def rate_ge_30000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None or rate <= 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.75")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["ge_30000"] = rate
    await state.update_data(rates=rates)
    await message.answer("–ö–∞–∫–æ–π –∫—É—Ä—Å –±—ã–ª <b>–æ—Ç 10000 –¥–æ 30000 —é–∞–Ω–µ–π</b>? (‚ÇΩ/¬•)")
    await state.set_state(ProfitStates.rate_10000_30000)

@dp.message(ProfitStates.rate_10000_30000)
async def rate_10000_30000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None or rate <= 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.80")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["r_10000_30000"] = rate
    await state.update_data(rates=rates)
    await message.answer("–ö–∞–∫–æ–π –±—ã–ª –∫—É—Ä—Å <b>–æ—Ç 3000 –¥–æ 10000 —é–∞–Ω–µ–π</b>? (‚ÇΩ/¬•)")
    await state.set_state(ProfitStates.rate_3000_10000)

@dp.message(ProfitStates.rate_3000_10000)
async def rate_3000_10000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None or rate <= 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.85")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["r_3000_10000"] = rate
    await state.update_data(rates=rates)
    await message.answer("–ö–∞–∫–æ–π –±—ã–ª –∫—É—Ä—Å <b>–æ—Ç 1000 –¥–æ 3000 —é–∞–Ω–µ–π</b>? (‚ÇΩ/¬•)")
    await state.set_state(ProfitStates.rate_1000_3000)

@dp.message(ProfitStates.rate_1000_3000)
async def rate_1000_3000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None or rate <= 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.90")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["r_1000_3000"] = rate
    await state.update_data(rates=rates)
    await message.answer("–ö–∞–∫–æ–π –±—ã–ª –∫—É—Ä—Å <b>–¥–æ 1000 —é–∞–Ω–µ–π</b>? (‚ÇΩ/¬•)")
    await state.set_state(ProfitStates.rate_lt_1000)

@dp.message(ProfitStates.rate_lt_1000)
async def rate_lt_1000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None or rate <= 0:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.00")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["lt_1000"] = rate
    await state.update_data(rates=rates)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–≤ —Å—Ç–æ–ª–±–∏–∫</b> —Å—É–º–º—ã —é–∞–Ω–µ–π –∑–∞—è–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ <b>–ø–æ –∫—É—Ä—Å—É –±–µ–∑ —Å–∫–∏–¥–æ–∫</b>.\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>1500\n3500\n12000\n...</code>"
    )
    await state.set_state(ProfitStates.amounts_no_discount)

@dp.message(ProfitStates.amounts_no_discount)
async def amounts_no_discount(message: Message, state: FSMContext):
    vals = _parse_multiline_numbers(message.text)
    if not vals:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —á–∏—Å–µ–ª. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—ã —é–∞–Ω–µ–π –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ.")
        return
    await state.update_data(amounts_no_discount=vals)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–≤ —Å—Ç–æ–ª–±–∏–∫</b> —Å—É–º–º—ã —é–∞–Ω–µ–π –∑–∞—è–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ <b>–ø–æ –∫—É—Ä—Å—É —Å–æ —Å–∫–∏–¥–∫–æ–π</b>.\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>900\n2600\n8000\n...</code>"
    )
    await state.set_state(ProfitStates.amounts_discount)

@dp.message(ProfitStates.amounts_discount)
async def amounts_discount(message: Message, state: FSMContext):
    vals = _parse_multiline_numbers(message.text)
    if not vals:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —á–∏—Å–µ–ª. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—ã —é–∞–Ω–µ–π –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ.")
        return

    data = await state.get_data()
    rates: dict = data["rates"]
    amounts_no = data.get("amounts_no_discount", [])
    amounts_disc = vals

    sum_no = sum(amounts_no)
    sum_disc = sum(amounts_disc)
    total_cny = sum_no + sum_disc

    payout_no = sum_no * PAY_NO_DISCOUNT_RUB_PER_CNY
    payout_disc = sum_disc * PAY_DISCOUNT_RUB_PER_CNY
    payout_total = payout_no + payout_disc

    # –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤ —Ä—É–±–ª—è—Ö) –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º
    lines_check_no = []
    for a in amounts_no:
        r = _pick_rate_for_amount(a, rates)
        rub = a * (r + CHECK_ADD_NO_DISCOUNT)
        lines_check_no.append(f"{a:,.2f} ¬• √ó ({r:.4f} + {CHECK_ADD_NO_DISCOUNT:.2f}) = {_format_rub(rub)}".replace(",", " "))

    lines_check_disc = []
    for a in amounts_disc:
        r = _pick_rate_for_amount(a, rates)
        rub = a * (r + CHECK_ADD_DISCOUNT)
        lines_check_disc.append(f"{a:,.2f} ¬• √ó ({r:.4f} + {CHECK_ADD_DISCOUNT:.2f}) = {_format_rub(rub)}".replace(",", " "))

    # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
    msg = []
    msg.append("<b>–ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å</b>")
    msg.append("")
    msg.append("<b>–ö—É—Ä—Å—ã (‚ÇΩ/¬•):</b>")
    msg.append(f"–±–æ–ª—å—à–µ 30000 ¬•: <b>{rates['ge_30000']}</b>")
    msg.append(f"10000‚Äì30000 ¬•: <b>{rates['r_10000_30000']}</b>")
    msg.append(f"3000‚Äì10000 ¬•: <b>{rates['r_3000_10000']}</b>")
    msg.append(f"1000‚Äì3000 ¬•: <b>{rates['r_1000_3000']}</b>")
    msg.append(f"–¥–æ 1000 ¬•: <b>{rates['lt_1000']}</b>")
    msg.append("")
    msg.append("<b>–°—É–º–º—ã –≤ —é–∞–Ω—è—Ö:</b>")
    msg.append(f"–ë–µ–∑ —Å–∫–∏–¥–∫–∏: {_format_cny(sum_no)}")
    msg.append(f"–°–æ —Å–∫–∏–¥–∫–æ–π: {_format_cny(sum_disc)}")
    msg.append(f"–í—Å–µ–≥–æ: <b>{_format_cny(total_cny)}</b>")
    msg.append("")
    msg.append("<b>–í—ã–ø–ª–∞—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä—É:</b>")
    msg.append(f"–ë–µ–∑ —Å–∫–∏–¥–∫–∏: {_format_cny(sum_no)} √ó {PAY_NO_DISCOUNT_RUB_PER_CNY:.2f} ‚ÇΩ/¬• = <b>{_format_rub(payout_no)}</b>")
    msg.append(f"–°–æ —Å–∫–∏–¥–∫–æ–π: {_format_cny(sum_disc)} √ó {PAY_DISCOUNT_RUB_PER_CNY:.2f} ‚ÇΩ/¬• = <b>{_format_rub(payout_disc)}</b>")
    msg.append(f"–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: <b>{_format_rub(payout_total)}</b>")
    msg.append("")
    msg.append("<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ —Å–∫–∏–¥–∫–∏):</b>")
    if lines_check_no:
        msg.extend("‚Ä¢ " + s for s in lines_check_no)
    else:
        msg.append("‚Äî")
    msg.append("")
    msg.append("<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö (—Å–æ —Å–∫–∏–¥–∫–æ–π):</b>")
    if lines_check_disc:
        msg.extend("‚Ä¢ " + s for s in lines_check_disc)
    else:
        msg.append("‚Äî")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    text = "\n".join(msg)
    if len(text) > 3900:
        # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ ‚Äî –ø—Ä–∏—Å–µ—á—ë–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —á–∞—Å—Ç–∏
        text = "\n".join(msg[:msg.index("<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ —Å–∫–∏–¥–∫–∏):</b>")])
        text += "\n\n<i>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ —Å—Ç—Ä–æ–∫ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫–æ–≤.</i>"

    await message.answer(text, reply_markup=main_kb)
    await state.clear()

# ======== –ó–ê–ü–£–°–ö ========
async def main():
    if not API_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TGTOKEN_TEST")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
