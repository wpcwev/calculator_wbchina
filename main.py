import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# ======== –ù–ê–°–¢–†–û–ô–ö–ò ========
API_TOKEN = os.getenv("TGTOKEN")  # –∑–∞–¥–∞–π —Ç–æ–∫–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏

# –°—Ç–∞–≤–∫–∏ –≤—ã–ø–ª–∞—Ç –ø–∞—Ä—Ç–Ω—ë—Ä—É (–≤ —Ä—É–±./–∑–∞ 1 —é–∞–Ω—å)
PAY_NO_DISCOUNT_RUB_PER_CNY = 0.15   # –±–µ–∑ —Å–∫–∏–¥–∫–∏
PAY_DISCOUNT_RUB_PER_CNY   = 0.10    # —Å–æ —Å–∫–∏–¥–∫–æ–π

# –ù–∞–¥–±–∞–≤–∫–∞ –∫ –∫—É—Ä—Å—É –≤ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∞—Ö (–≤ —Ä—É–±./–∑–∞ 1 —é–∞–Ω—å)
CHECK_ADD_NO_DISCOUNT = 0.10
CHECK_ADD_DISCOUNT    = 0.05

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ======== –ö–õ–ê–í–ò–ê–¢–£–†–´ ========
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏")],
    ],
    resize_keyboard=True
)
cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# ======== –°–û–°–¢–û–Ø–ù–ò–Ø ========
class ProfitStates(StatesGroup):
    rate_ge_30000 = State()
    rate_10000_30000 = State()
    rate_3000_10000 = State()
    rate_1000_3000 = State()
    rate_lt_1000 = State()
    amounts_mixed = State()   # –µ–¥–∏–Ω—ã–π —Å—Ç–æ–ª–±–∏–∫ —Å—É–º–º

# ======== –£–¢–ò–õ–ò–¢–´ ========
def _parse_float(text: str):
    t = text.strip().replace(",", ".")
    try:
        v = float(t)
        return v if v > 0 else None
    except ValueError:
        return None

def _format_rub(x: float) -> str:
    return f"{x:,.2f} ‚ÇΩ".replace(",", " ")

def _format_cny(x: float) -> str:
    return f"{x:,.2f} ¬•".replace(",", " ")

def _pick_rate_for_amount(cny_amount: float, rates: dict) -> float:
    if cny_amount >= 30000:
        return rates["ge_30000"]
    if 10000 <= cny_amount < 30000:
        return rates["r_10000_30000"]
    if 3000 <= cny_amount < 10000:
        return rates["r_3000_10000"]
    if 1000 <= cny_amount < 3000:
        return rates["r_1000_3000"]
    return rates["lt_1000"]

def _parse_mixed_lines(text: str) -> tuple[list[float], list[float]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–±–µ–∑_—Å–∫–∏–¥–∫–∏, —Å–æ_—Å–∫–∏–¥–∫–æ–π).
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
      +1500    -> –±–µ–∑ —Å–∫–∏–¥–∫–∏
      -2600    -> —Å–æ —Å–∫–∏–¥–∫–æ–π
      1500 ns  / 1500 no / 1500 –±–µ–∑
      2600 s   / 2600 —Å–æ / 2600 —Å–∫–∏–¥–∫–∞
      –ø—Ä–æ—Å—Ç–æ 1500 -> –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ë–ï–ó —Å–∫–∏–¥–∫–∏
    –ú—É—Å–æ—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    """
    no_disc, disc = [], []
    for raw in text.replace("\t", "\n").splitlines():
        line = raw.strip().lower().replace(",", ".")
        if not line:
            continue

        mark = None
        if line.startswith("+"):
            mark = "no"
            line = line[1:].strip()
        elif line.startswith("-"):
            mark = "disc"
            line = line[1:].strip()

        parts = line.split()
        num_part = parts[0] if parts else ""
        try:
            amount = float(num_part)
        except ValueError:
            filt = "".join(ch for ch in num_part if ch.isdigit() or ch in ".-")
            try:
                amount = float(filt)
            except ValueError:
                continue

        if amount <= 0:
            continue

        if mark is None and len(parts) > 1:
            tag = parts[1]
            if tag in ("s", "so", "—Å–∫–∏–¥–∫–∞", "—Å–æ", "—Å", "disc", "d"):
                mark = "disc"
            elif tag in ("ns", "no", "–±–µ–∑", "b", "nd"):
                mark = "no"

        if mark == "disc":
            disc.append(amount)
        else:
            no_disc.append(amount)
    return no_disc, disc

# ======== –•–≠–ù–î–õ–ï–†–´ ========
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –ø–∞—Ä—Ç–Ω—ë—Ä—É –ø–æ –æ–±–º–µ–Ω—É. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=main_kb)

@dp.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

@dp.message(F.text == "üìä –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏")
async def start_profit_calc(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(rates={})
    await message.answer("–ö–∞–∫–æ–π –±—ã–ª –∫—É—Ä—Å —Å–µ–≥–æ–¥–Ω—è <b>–æ—Ç 30000 —é–∞–Ω–µ–π</b>? (–≤ ‚ÇΩ –∑–∞ 1 ¬•)", reply_markup=cancel_kb)
    await state.set_state(ProfitStates.rate_ge_30000)

@dp.message(ProfitStates.rate_ge_30000)
async def rate_ge_30000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.75")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["ge_30000"] = rate
    await state.update_data(rates=rates)
    await message.answer("–ö–∞–∫–æ–π –∫—É—Ä—Å –±—ã–ª <b>–æ—Ç 10000 –¥–æ 30000 —é–∞–Ω–µ–π</b>? (‚ÇΩ/¬•)")
    await state.set_state(ProfitStates.rate_10000_30000)

@dp.message(ProfitStates.rate_10000_30000)
async def rate_10000_30000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.80")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["r_10000_30000"] = rate
    await state.update_data(rates=rates)
    await message.answer("–ö–∞–∫–æ–π –±—ã–ª –∫—É—Ä—Å <b>–æ—Ç 3000 –¥–æ 10000 —é–∞–Ω–µ–π</b>? (‚ÇΩ/¬•)")
    await state.set_state(ProfitStates.rate_3000_10000)

@dp.message(ProfitStates.rate_3000_10000)
async def rate_3000_10000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.85")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["r_3000_10000"] = rate
    await state.update_data(rates=rates)
    await message.answer("–ö–∞–∫–æ–π –±—ã–ª –∫—É—Ä—Å <b>–æ—Ç 1000 –¥–æ 3000 —é–∞–Ω–µ–π</b>? (‚ÇΩ/¬•)")
    await state.set_state(ProfitStates.rate_1000_3000)

@dp.message(ProfitStates.rate_1000_3000)
async def rate_1000_3000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 11.90")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["r_1000_3000"] = rate
    await state.update_data(rates=rates)
    await message.answer("–ö–∞–∫–æ–π –±—ã–ª –∫—É—Ä—Å <b>–¥–æ 1000 —é–∞–Ω–µ–π</b>? (‚ÇΩ/¬•)")
    await state.set_state(ProfitStates.rate_lt_1000)

@dp.message(ProfitStates.rate_lt_1000)
async def rate_lt_1000(message: Message, state: FSMContext):
    rate = _parse_float(message.text)
    if rate is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 12.00")
        return
    data = await state.get_data()
    rates = data.get("rates", {})
    rates["lt_1000"] = rate
    await state.update_data(rates=rates)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ <b>–≤ –û–î–ò–ù —Å—Ç–æ–ª–±–∏–∫</b> —Å—É–º–º—ã —é–∞–Ω–µ–π.\n"
        "–û—Ç–º–µ—á–∞–π—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:\n"
        "‚Ä¢ <b>+1500</b> ‚Äî –±–µ–∑ —Å–∫–∏–¥–∫–∏\n"
        "‚Ä¢ <b>-2600</b> ‚Äî —Å–æ —Å–∫–∏–¥–∫–æ–π\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ: <code>1500 ns</code> (–±–µ–∑) –∏–ª–∏ <code>2600 s</code> (—Å–æ).\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>\n+1500\n-900\n+12000\n-2600\n</code>",
        reply_markup=cancel_kb
    )
    await state.set_state(ProfitStates.amounts_mixed)

@dp.message(ProfitStates.amounts_mixed)
async def amounts_mixed(message: Message, state: FSMContext):
    no_list, disc_list = _parse_mixed_lines(message.text)
    if not no_list and not disc_list:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —á–∏—Å–µ–ª. –ü—Ä–∏–º–µ—Ä:\n<code>\n+1500\n-900\n+12000\n-2600\n</code>")
        return

    data = await state.get_data()
    rates: dict = data["rates"]

    sum_no = sum(no_list)
    sum_disc = sum(disc_list)
    total_cny = sum_no + sum_disc

    payout_no = sum_no * PAY_NO_DISCOUNT_RUB_PER_CNY
    payout_disc = sum_disc * PAY_DISCOUNT_RUB_PER_CNY
    payout_total = payout_no + payout_disc

    # –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    lines_check_no = []
    for a in no_list:
        r = _pick_rate_for_amount(a, rates)
        rub = a * (r + CHECK_ADD_NO_DISCOUNT)
        lines_check_no.append(f"{a:,.2f} ¬• √ó ({r:.4f} + {CHECK_ADD_NO_DISCOUNT:.2f}) = {_format_rub(rub)}".replace(",", " "))

    lines_check_disc = []
    for a in disc_list:
        r = _pick_rate_for_amount(a, rates)
        rub = a * (r + CHECK_ADD_DISCOUNT)
        lines_check_disc.append(f"{a:,.2f} ¬• √ó ({r:.4f} + {CHECK_ADD_DISCOUNT:.2f}) = {_format_rub(rub)}".replace(",", " "))

    msg = []
    msg.append("<b>–ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å</b>\n")
    msg.append("<b>–ö—É—Ä—Å—ã (‚ÇΩ/¬•):</b>")
    msg.append(f"‚â• 30000 ¬•: <b>{rates['ge_30000']}</b>")
    msg.append(f"10000‚Äì30000 ¬•: <b>{rates['r_10000_30000']}</b>")
    msg.append(f"3000‚Äì10000 ¬•: <b>{rates['r_3000_10000']}</b>")
    msg.append(f"1000‚Äì3000 ¬•: <b>{rates['r_1000_3000']}</b>")
    msg.append(f"&lt; 1000 ¬•: <b>{rates['lt_1000']}</b>\n")  # —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º <

    msg.append("<b>–°—É–º–º—ã –≤ —é–∞–Ω—è—Ö:</b>")
    msg.append(f"–ë–µ–∑ —Å–∫–∏–¥–∫–∏: {_format_cny(sum_no)}")
    msg.append(f"–°–æ —Å–∫–∏–¥–∫–æ–π: {_format_cny(sum_disc)}")
    msg.append(f"–í—Å–µ–≥–æ: <b>{_format_cny(total_cny)}</b>\n")

    msg.append("<b>–í—ã–ø–ª–∞—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä—É:</b>")
    msg.append(f"–ë–µ–∑ —Å–∫–∏–¥–∫–∏: {_format_cny(sum_no)} √ó {PAY_NO_DISCOUNT_RUB_PER_CNY:.2f} ‚ÇΩ/¬• = <b>{_format_rub(payout_no)}</b>")
    msg.append(f"–°–æ —Å–∫–∏–¥–∫–æ–π: {_format_cny(sum_disc)} √ó {PAY_DISCOUNT_RUB_PER_CNY:.2f} ‚ÇΩ/¬• = <b>{_format_rub(payout_disc)}</b>")
    msg.append(f"–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: <b>{_format_rub(payout_total)}</b>\n")

    msg.append("<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ —Å–∫–∏–¥–∫–∏):</b>")
    msg.extend("‚Ä¢ " + s for s in lines_check_no) if lines_check_no else msg.append("‚Äî")
    msg.append("\n<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö (—Å–æ —Å–∫–∏–¥–∫–æ–π):</b>")
    msg.extend("‚Ä¢ " + s for s in lines_check_disc) if lines_check_disc else msg.append("‚Äî")

    text = "\n".join(msg)
    if len(text) > 3900:
        cut_idx = msg.index("<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö (–±–µ–∑ —Å–∫–∏–¥–∫–∏):</b>")
        text = "\n".join(msg[:cut_idx]) + "\n\n<i>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫.</i>"

    await message.answer(text, reply_markup=main_kb)
    await state.clear()

# ======== –ó–ê–ü–£–°–ö ========
async def main():
    if not API_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TGTOKEN_TEST")
    # —Å–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ Conflict
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
